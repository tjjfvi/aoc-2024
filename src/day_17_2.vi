
use std::{
  option::Option::{Option, Some, None},
  result::Result::{Result, Ok, Err},
  array::Array,
  n64::N64,
};

// 2 4  b = a & 7
// 1 1  b ^= 1
// 7 5  c = a >> b
// 1 5  b ^= 5
// 4 3  b ^= c
// 5 5  out b
// 0 3  a >>= 3
// 3 0  if a != 0 { goto 0 }

pub fn main(&io: &IO) {
  let input = io.full_input();

  dyn fn read_value() {
    let (_, rest) = input.split_once(": ");
    let (value, rest) = rest.unwrap().split_once("\n");
    input = rest.unwrap();
    value
  }

  let a = N32::parse(read_value()).unwrap();
  let b = N32::parse(read_value()).unwrap();
  let c = N32::parse(read_value()).unwrap();

  let program = read_value().split(",").map(fn(x) N32::parse(x).unwrap());
  let output = [];
  while program.pop_front() is Some(value) {
    output.push_front(value);
  }

  fn check(&io: &IO, a: N64, output: List[N32], &quine: &N64) {
    io.println(output.len().to_string());
    if output.len() == 0 {
      if a.lt(quine) {
        quine = a;
      }
    } else {
      let o = output.pop_front().unwrap();
      let c = 0;
      while c < 8 {
        let b = o ^ c ^ 4;
        let a = a.shl(3).or(N64::from_n32(b));
        if a.shr(b ^ 1).to_n32() & 7 == c {
          check(&io, a, output, &quine);
        }
        c += 1;
      }
    }
  }

  let quine = N64::maximum;
  check(&io, N64::zero, output, &quine);

  io.println(quine.to_string());
}
